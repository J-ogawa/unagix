;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name unagix.core, :imports nil, :requires {om om.core, om.core om.core, dom om.dom, om.dom om.dom, cljs.core.async cljs.core.async, data clojure.data, clojure.data clojure.data, string clojure.string, clojure.string clojure.string}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {to-koma-type {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 84, :column 8, :end-line 84, :end-column 20, :private true, :arglists (quote ([kifu_char]))}, :private true, :name unagix.core/to-koma-type, :variadic false, :file "src/unagix/core.cljs", :end-column 20, :method-params ([kifu_char]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kifu_char]))}, ->t_unagix$core8530 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([container app owner state meta8531])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8530, :variadic false, :file "src/unagix/core.cljs", :method-params ([container app owner state meta8531]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 208, :max-fixed-arity 5, :fn-var true, :arglists (quote ([container app owner state meta8531])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8527 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([container app owner state meta8528])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8527, :variadic false, :file "src/unagix/core.cljs", :method-params ([container app owner state meta8528]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 208, :max-fixed-arity 5, :fn-var true, :arglists (quote ([container app owner state meta8528])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, stock-koma {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 175, :column 7, :end-line 175, :end-column 17, :arglists (quote ([app owner]))}, :name unagix.core/stock-koma, :variadic false, :file "src/unagix/core.cljs", :end-column 17, :method-params ([app owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app owner]))}, t_unagix$core8521 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8521, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 200, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_unagix$core8499 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8499, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 160, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reach-vecs {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 67, :column 7, :end-line 67, :end-column 17, :arglists (quote ([koma vec-kind]))}, :name unagix.core/reach-vecs, :variadic false, :file "src/unagix/core.cljs", :end-column 17, :method-params ([koma vec-kind]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([koma vec-kind]))}, check-dst {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([field owner dst]))}, :name unagix.core/check-dst, :variadic false, :file "src/unagix/core.cljs", :end-column 16, :method-params ([field owner dst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([field owner dst]))}, destination {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 44, :column 7, :end-line 44, :end-column 18, :arglists (quote ([field src reach-vec]))}, :name unagix.core/destination, :variadic false, :file "src/unagix/core.cljs", :end-column 18, :method-params ([field src reach-vec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([field src reach-vec]))}, direction {:name unagix.core/direction, :file "src/unagix/core.cljs", :line 34, :column 1, :end-line 34, :end-column 15, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 34, :column 6, :end-line 34, :end-column 15}}, t_unagix$core8527 {:num-fields 5, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8527, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 208, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reflected-state {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 118, :column 8, :end-line 118, :end-column 23, :private true, :arglists (quote ([state move]))}, :private true, :name unagix.core/reflected-state, :variadic false, :file "src/unagix/core.cljs", :end-column 23, :method-params ([state move]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state move]))}, kifu {:name unagix.core/kifu, :file "src/unagix/core.cljs", :line 12, :column 1, :end-line 12, :end-column 14, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 12, :column 10, :end-line 12, :end-column 14}}, komadai {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 187, :column 7, :end-line 187, :end-column 14, :arglists (quote ([player owner]))}, :name unagix.core/komadai, :variadic false, :file "src/unagix/core.cljs", :end-column 14, :method-params ([player owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([player owner]))}, t_unagix$core8490 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8490, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 149, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, promote {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 114, :column 8, :end-line 114, :end-column 15, :private true, :arglists (quote ([koma]))}, :private true, :name unagix.core/promote, :variadic false, :file "src/unagix/core.cljs", :end-column 15, :method-params ([koma]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koma]))}, reach-long {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 55, :column 7, :end-line 55, :end-column 17, :arglists (quote ([field src reach-vec] [field owner src reach-vec reaching])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([field src reach-vec] [field owner src reach-vec reaching]), :arglists ([field src reach-vec] [field owner src reach-vec reaching]), :arglists-meta (nil nil)}}, :name unagix.core/reach-long, :variadic false, :file "src/unagix/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([field src reach-vec] [field owner src reach-vec reaching]), :arglists ([field src reach-vec] [field owner src reach-vec reaching]), :arglists-meta (nil nil)}, :method-params ([field src reach-vec] [field owner src reach-vec reaching]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 5, :fn-var true, :arglists ([field src reach-vec] [field owner src reach-vec reaching])}, t_unagix$core8502 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8502, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 167, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8493 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([masu data owner meta8494])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8493, :variadic false, :file "src/unagix/core.cljs", :method-params ([masu data owner meta8494]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 149, :max-fixed-arity 4, :fn-var true, :arglists (quote ([masu data owner meta8494])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8490 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([masu data owner meta8491])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8490, :variadic false, :file "src/unagix/core.cljs", :method-params ([masu data owner meta8491]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 149, :max-fixed-arity 4, :fn-var true, :arglists (quote ([masu data owner meta8491])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8496 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([masu-row app owner meta8497])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8496, :variadic false, :file "src/unagix/core.cljs", :method-params ([masu-row app owner meta8497]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 160, :max-fixed-arity 4, :fn-var true, :arglists (quote ([masu-row app owner meta8497])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reach-short {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([field src reach-vec]))}, :name unagix.core/reach-short, :variadic false, :file "src/unagix/core.cljs", :end-column 18, :method-params ([field src reach-vec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 3, :fn-var true, :arglists (quote ([field src reach-vec]))}, ->t_unagix$core8515 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([komadai player owner meta8516])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8515, :variadic false, :file "src/unagix/core.cljs", :method-params ([komadai player owner meta8516]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 188, :max-fixed-arity 4, :fn-var true, :arglists (quote ([komadai player owner meta8516])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, first-field {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 107, :column 8, :end-line 107, :end-column 19, :private true, :arglists (quote ([strs]))}, :private true, :name unagix.core/first-field, :variadic false, :file "src/unagix/core.cljs", :end-column 19, :method-params ([strs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([strs]))}, t_unagix$core8518 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8518, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 188, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_unagix$core8515 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8515, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 188, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8505 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([center app owner meta8506])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8505, :variadic false, :file "src/unagix/core.cljs", :method-params ([center app owner meta8506]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 167, :max-fixed-arity 4, :fn-var true, :arglists (quote ([center app owner meta8506])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_unagix$core8505 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8505, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 167, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, movable-masus {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 71, :column 7, :end-line 71, :end-column 20, :arglists (quote ([field src]))}, :name unagix.core/movable-masus, :variadic false, :file "src/unagix/core.cljs", :end-column 20, :method-params ([field src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([field src]))}, t_unagix$core8511 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8511, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 176, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8511 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stock-koma app owner meta8512])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8511, :variadic false, :file "src/unagix/core.cljs", :method-params ([stock-koma app owner meta8512]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 176, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stock-koma app owner meta8512])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_unagix$core8496 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8496, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 160, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8508 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stock-koma app owner meta8509])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8508, :variadic false, :file "src/unagix/core.cljs", :method-params ([stock-koma app owner meta8509]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 176, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stock-koma app owner meta8509])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8502 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([center app owner meta8503])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8502, :variadic false, :file "src/unagix/core.cljs", :method-params ([center app owner meta8503]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 167, :max-fixed-arity 4, :fn-var true, :arglists (quote ([center app owner meta8503])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, masu-row {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 159, :column 7, :end-line 159, :end-column 15, :arglists (quote ([app owner]))}, :name unagix.core/masu-row, :variadic false, :file "src/unagix/core.cljs", :end-column 15, :method-params ([app owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app owner]))}, t_unagix$core8493 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8493, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 149, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, center {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 166, :column 7, :end-line 166, :end-column 13, :arglists (quote ([app owner]))}, :name unagix.core/center, :variadic false, :file "src/unagix/core.cljs", :end-column 13, :method-params ([app owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app owner]))}, basic-type-vec {:name unagix.core/basic-type-vec, :file "src/unagix/core.cljs", :line 19, :column 1, :end-line 19, :end-column 20, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 19, :column 6, :end-line 19, :end-column 20}}, to-int {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 78, :column 7, :end-line 78, :end-column 13, :arglists (quote ([coordinate]))}, :name unagix.core/to-int, :variadic false, :file "src/unagix/core.cljs", :end-column 13, :method-params ([coordinate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coordinate]))}, ->t_unagix$core8521 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([side player owner meta8522])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8521, :variadic false, :file "src/unagix/core.cljs", :method-params ([side player owner meta8522]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 200, :max-fixed-arity 4, :fn-var true, :arglists (quote ([side player owner meta8522])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_unagix$core8524 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8524, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 200, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_unagix$core8530 {:num-fields 5, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8530, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 208, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, masu {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 148, :column 7, :end-line 148, :end-column 11, :arglists (quote ([data owner]))}, :name unagix.core/masu, :variadic false, :file "src/unagix/core.cljs", :end-column 11, :method-params ([data owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner]))}, status {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 138, :column 8, :end-line 138, :end-column 14, :private true, :arglists (quote ([kifu]))}, :private true, :name unagix.core/status, :variadic false, :file "src/unagix/core.cljs", :end-column 14, :method-params ([kifu]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kifu]))}, move-index {:name unagix.core/move-index, :file "src/unagix/core.cljs", :line 15, :column 1, :end-line 15, :end-column 20, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 15, :column 10, :end-line 15, :end-column 20}}, to-coordinate {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 96, :column 8, :end-line 96, :end-column 21, :private true, :arglists (quote ([kifu_char]))}, :private true, :name unagix.core/to-coordinate, :variadic false, :file "src/unagix/core.cljs", :end-column 21, :method-params ([kifu_char]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kifu_char]))}, container {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 206, :column 7, :end-line 206, :end-column 16, :arglists (quote ([app owner]))}, :name unagix.core/container, :variadic false, :file "src/unagix/core.cljs", :end-column 16, :method-params ([app owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app owner]))}, ->t_unagix$core8499 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([masu-row app owner meta8500])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8499, :variadic false, :file "src/unagix/core.cljs", :method-params ([masu-row app owner meta8500]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 160, :max-fixed-arity 4, :fn-var true, :arglists (quote ([masu-row app owner meta8500])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 224, :column 7, :end-line 224, :end-column 19, :arglists (quote ([]))}, :name unagix.core/on-js-reload, :variadic false, :file "src/unagix/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->t_unagix$core8518 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([komadai player owner meta8519])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8518, :variadic false, :file "src/unagix/core.cljs", :method-params ([komadai player owner meta8519]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 188, :max-fixed-arity 4, :fn-var true, :arglists (quote ([komadai player owner meta8519])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_unagix$core8524 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([side player owner meta8525])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/->t_unagix$core8524, :variadic false, :file "src/unagix/core.cljs", :method-params ([side player owner meta8525]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 200, :max-fixed-arity 4, :fn-var true, :arglists (quote ([side player owner meta8525])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, convert-koma {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 103, :column 8, :end-line 103, :end-column 20, :private true, :arglists (quote ([pair]))}, :private true, :name unagix.core/convert-koma, :variadic false, :file "src/unagix/core.cljs", :end-column 20, :method-params ([pair]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pair]))}, side {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 199, :column 7, :end-line 199, :end-column 11, :arglists (quote ([player owner]))}, :name unagix.core/side, :variadic false, :file "src/unagix/core.cljs", :end-column 11, :method-params ([player owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([player owner]))}, t_unagix$core8508 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name unagix.core/t_unagix$core8508, :file "src/unagix/core.cljs", :type true, :anonymous true, :column 3, :line 176, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, stock-types {:name unagix.core/stock-types, :file "src/unagix/core.cljs", :line 82, :column 1, :end-line 82, :end-column 17, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 82, :column 6, :end-line 82, :end-column 17}}, next-turn {:protocol-inline nil, :meta {:file "/Users/conilus/Dev/clj/unagix/src/unagix/core.cljs", :line 100, :column 8, :end-line 100, :end-column 17, :private true, :arglists (quote ([current]))}, :private true, :name unagix.core/next-turn, :variadic false, :file "src/unagix/core.cljs", :end-column 17, :method-params ([current]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([current]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:role :out-of-field :amount meta8512 stock-koma :ka :long :ngi meta8522 meta8500 :short owner komadai meta8506 :white data :else :nky :- :nke meta8497 :hu :nhi :gy :field meta8503 :empty-space meta8491 meta8525 :turn :enemy :koma-type meta8509 :mine :+ state meta8519 :ke masu-row meta8516 center :gi meta8528 :target masu :nhu quote :arglists :ki container app meta8494 side :nka :hi meta8531 :stock player :ky :black}, :order [:ka :ngi :nky :nke :hu :nhi :gy :ke :gi :nhu :ki :nka :hi :ky :long :short :+ :- :out-of-field :empty-space :enemy :else :mine :field :turn :stock masu :arglists quote data owner meta8491 meta8494 masu-row app meta8497 meta8500 center meta8503 meta8506 :amount :koma-type :role stock-koma meta8509 meta8512 komadai player meta8516 meta8519 side meta8522 meta8525 :white :black container state meta8528 meta8531 :target]}, :doc nil}